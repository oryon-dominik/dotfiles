# uv configuration file
# https://docs.astral.sh/uv/
# pointed to by environment variable UV_CONFIG_FILE= set during installation.
# defaults to: ~/.config/uv/uv.toml
# modified to: ~/.config/uv.toml


# for CI/CD you might set:
# UV_PYTHON=/path/to/python to use for all operations
# UV_SYSTEM_PYTHON=true
# UV_BREAK_SYSTEM_PACKAGES=true


# Path to uv python installations.
# UV_PYTHON_INSTALL_DIR=~/uv/python  - set during installation


# Path to the cache directory.
# Defaults to $HOME/Library/Caches/uv on macOS, $XDG_CACHE_HOME/uv or
# $HOME/.cache/uv on Linux, and %LOCALAPPDATA%\uv\cache on Windows.
# Environment variable UV_CACHE_DIR has precedence over this.
# UV_CACHE_DIR is=~/uv/cache  - set during installation
# Default value: None
# cache-dir = "~/uv/cache"


# Whether the project is managed by uv. If false, uv will ignore the project
# when uv run is invoked.
# ! Should be decided on a per project basis in the pyproject.toml file.
# Default shall be true though.
# Default value: true
managed = true


# Whether to allow Python downloads.
# Default value: "automatic"
# Possible values:
# "automatic": Automatically download managed Python installations when needed
# "manual": Do not automatically download managed Python installations; require
# explicit installation
# "never": Do not ever allow Python downloads
# Default value: "automatic"
python-downloads = "automatic"


# Whether to prefer using Python installations that are already present on the
# system, or those that are downloaded and installed by uv.
# Default value: "managed"
# Possible values:
# "only-managed": Only use managed Python installations; never use system
# Python installations "managed": Prefer managed Python installations over
# system Python installations "system": Prefer system Python installations over
# managed Python installations "only-system": Only use system Python
# installations; never use managed Python installations.
# Environment variable UV_PYTHON_PREFERENCE has precedence over this.
# Default value: "managed"
python-preference = "only-managed"


# The strategy to use when selecting between the different compatible versions
# for a given package requirement. By default, uv will use the latest
# compatible version of each package (highest). Default value: "highest"
# Possible values: "highest": Resolve the highest compatible version of each
# package "lowest": Resolve the lowest compatible version of each package
# "lowest-direct": Resolve the lowest compatible version of any direct
# dependencies, and the highest compatible version of any transitive
# dependencies.
# Environment variable UV_RESOLUTION has precedence over this.
# Default value: "highest"
resolution = "highest"


# Whether to load TLS certificates from the platform's native certificate store.
# By default, uv loads certificates from the bundled webpki-roots crate.
# The webpki-roots are a reliable set of trust roots from Mozilla, and
# including them in uv improves portability and performance (especially on
# macOS).
# However, in some cases, you may want to use the platform's native
# certificate store, especially if you're relying on a corporate trust root
# (e.g., for a mandatory proxy) that's included in your system's
# certificate store.
# Environment variable UV_NATIVE_TLS has precedence over this.
# Default value: false
native-tls = false


[pip]
# Write the requirements generated by uv pip compile to the given
# requirements.txt file.
# If the file already exists, the existing versions will be preferred when
# resolving dependencies, unless --upgrade is also specified.
# Default value: None
output-file = "requirements.txt"


# The minimum Python version that should be supported by the resolved
# requirements (e.g., 3.8 or 3.8.17).
# If a patch version is omitted, the minimum patch version is assumed. For
# example, 3.8 is mapped to 3.8.0.
# Default value: None
python-version = "3.12"

# Require a matching hash for each requirement.
# Hash-checking mode is all or nothing. If enabled, all requirements must be
# provided with a corresponding hash or set of hashes. Additionally, if
# enabled, all requirements must either be pinned to exact versions (e.g.,
# ==1.0.0), or be specified via direct URL.
# Hash-checking mode introduces a number of additional constraints:
# Git dependencies are not supported. Editable installs are not supported.
# Local dependencies are not supported, unless they point to a specific wheel
# (.whl) or source archive (.zip, .tar.gz), as opposed to a directory.
# Environment variable UV_REQUIRE_HASHES has precedence over this.
#  Default value: false
require-hashes = false
